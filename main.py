import telebot
from telebot import types
import sqlite3
import hashlib
import requests
from datetime import datetime

BITRIX_CRM_API_URL_1 = "https://b24-rolvpq.bitrix24.ru/rest/1/dxte8zsvvzvusx97/crm.lead.add.json" #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞
BITRIX_CRM_API_URL_2 = "https://b24-rolvpq.bitrix24.ru/rest/1/dxte8zsvvzvusx97/crm.product.add.json" #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
BITRIX_CRM_API_URL_3 = "https://b24-rolvpq.bitrix24.ru/rest/1/dxte8zsvvzvusx97/crm.contact.add.json" #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot = telebot.TeleBot('6929738714:AAFf7yFYP01bVibY8FBs9obyQYBaZfOGe48')  # –∫–æ–Ω–Ω–µ–∫—Ç —Å –±–æ—Ç–æ–º @LevisSupportBot

name = None  # —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
password = None
support_name = None
user_id = None
text = None
order_list = None
user_name = None
current_datetime = None
user_states = None


def create_lead(name, phone, email): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞/—Å–¥–µ–ª–∫–∏ –≤ CRM Bitrix
    data = {
        "fields": {
            "TITLE": "–ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ Levi's",
            "NAME": name,
            "COMMENTS": order_list,
            # "PHONE": [{"VALUE": phone, "VALUE_TYPE": "WORK"}],
            # "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}]
        }
    }
    response = requests.post(BITRIX_CRM_API_URL_1, json=data)
    if response.status_code == 200:
        return "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã"
    else:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {response.text}"


def create_product(order_list): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ CRM Bitrix
    data = {
        "fields": {
            "NAME": order_list,
            "CURRENCY_ID": "RUB",

        }
    }
    response = requests.post(BITRIX_CRM_API_URL_2, json=data)
    if response.status_code == 200:
        return "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ CRM –ë–∏—Ç—Ä–∏–∫—Å"
    else:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {response.text}"



def create_contact(name, current_datetime): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ CRM Bitrix
    data = {
        "fields": {
            "NAME": name,
            "TYPE_ID": "CLIENT",
            "DATE_CREATE": current_datetime.isoformat(),
        }
    }
    response = requests.post(BITRIX_CRM_API_URL_3, json=data)
    if response.status_code == 200:
        return "–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
    else:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.text}"



@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    btn1 = types.KeyboardButton('üîê–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    btn2 = types.KeyboardButton('üë•–û –Ω–∞—Å')
    btn3 = types.KeyboardButton('üì¶–¢–æ–≤–∞—Ä—ã')
    btn4 = types.KeyboardButton('üöÄ–ó–∞–∫–∞–∑')
    btn5 = types.KeyboardButton('üÜò–ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Levis!' + '\n' + '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ', reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def main_menu(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    btn1 = types.KeyboardButton('üîê–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    btn2 = types.KeyboardButton('üë•–û –Ω–∞—Å')
    btn3 = types.KeyboardButton('üì¶–¢–æ–≤–∞—Ä—ã')
    btn4 = types.KeyboardButton('üöÄ–ó–∞–∫–∞–∑')
    btn5 = types.KeyboardButton('üÜò–ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ', reply_markup=markup)
    bot.register_next_step_handler(message, on_click)



def on_click(message):
    if message.text == 'üîê–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —è –í–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é!' + '\n' + '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è')
        bot.register_next_step_handler(message, registration)
    elif message.text == 'üë•–û –Ω–∞—Å':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn1 = types.KeyboardButton('‚Ü™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1)
        bot.send_message(message.chat.id, '–ú—ã –¥—Ä—É–∂–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è Levis!\n' + '–ú—ã –ª—é–±–∏–º –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –æ–¥–µ–∂–¥—É', reply_markup=markup)
        bot.register_next_step_handler(message, main_menu)
    elif message.text == 'üì¶–¢–æ–≤–∞—Ä—ã':
        goods(message)
    elif message.text == 'üöÄ–ó–∞–∫–∞–∑':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn1 = types.KeyboardButton('‚úÖ–î–∞')
        btn2 = types.KeyboardButton('‚ùå–ù–µ—Ç')
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?', reply_markup=markup)
        bot.register_next_step_handler(message, to_order)
    elif message.text == 'üÜò–ü–æ–º–æ—â—å':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–π —Ç–µ–º–µ –í–∞–º –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ')
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn1 = types.KeyboardButton('ü§î–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?')
        btn2 = types.KeyboardButton('ü§î–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã?')
        btn3 = types.KeyboardButton('ü§î–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?')
        btn4 = types.KeyboardButton('ü§ì–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, '–í–æ—Ç —Ç–µ–º—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —è –º–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å: ', reply_markup=markup)
        bot.register_next_step_handler(message, help)



def help(message):
    if message.text == 'ü§î–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn1 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1)
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', reply_markup=markup)
        bot.register_next_step_handler(message, main_menu)
    elif message.text == 'ü§î–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã?':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn1 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1)
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¢–æ–≤–∞—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, main_menu)
    elif message.text == 'ü§î–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn1 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1)
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫–∞–∑', reply_markup=markup)
        bot.register_next_step_handler(message, main_menu)
    elif message.text == 'ü§ì–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º':
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π —è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª—é –≤ –Ω–∞—à—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n' + '–í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –Ω–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n' + '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(message, support)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ—Ç')
        main_menu(message)



def registration(message):
    global name
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(message, registration)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –æ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –í–∞—à –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, user_pass)


def user_pass(message):
    global name, password, current_datetime
    password = message.text.strip()
    if len(password) < 6:
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        bot.register_next_step_handler(message, user_pass)
    else:
        hash_object = hashlib.md5(password.encode())
        conn = sqlite3.connect('levis.sql')
        cur = conn.cursor()
        cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, password TEXT)')
        cur.execute("INSERT INTO users (name, password) VALUES (?, ?)", (name, hash_object.hexdigest()))
        conn.commit()
        cur.close()
        conn.close()

        current_datetime = datetime.now()
        response = create_contact(name, current_datetime)
        bot.send_message(message.chat.id, response)
        bot.send_message(message.chat.id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        main_menu(message)



def goods(message):
    conn = sqlite3.connect('levis.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM goods')
    goods = cur.fetchall()
    info = ''
    for el in goods:
        info += f'{el[1]} - {el[2]} —Ä—É–±–ª–µ–π\n'
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n' + info)

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    btn1 = types.KeyboardButton('‚úÖ–î–∞')
    btn2 = types.KeyboardButton('‚ùå–ù–µ—Ç')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=markup)
    bot.register_next_step_handler(message, process_goods_response)


def process_goods_response(message):
    if message.text == '‚úÖ–î–∞':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n–±–æ—Ç–∏–Ω–∫–∏\n–∫—É—Ä—Ç–∫–∞')
        bot.register_next_step_handler(message, process_order)
    elif message.text == '‚ùå–ù–µ—Ç':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        main_menu(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        bot.register_next_step_handler(message, process_goods_response)


def to_order(message):
    if message.text == '‚úÖ–î–∞':
        bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n–±–æ—Ç–∏–Ω–∫–∏\n–∫—É—Ä—Ç–∫–∞')
        bot.register_next_step_handler(message, process_order)
    elif message.text == '‚ùå–ù–µ—Ç':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        main_menu(message)

def process_order(message):
    global order_list, user_name
    order_list = message.text.strip()
    user_name = message.chat.first_name if message.chat.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if not order_list:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:')
        bot.register_next_step_handler(message, process_order)
    else:
        conn = sqlite3.connect('levis.sql')
        cur = conn.cursor()
        cur.execute('SELECT name FROM goods')
        available_goods = [item[0].lower() for item in cur.fetchall()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        ordered_goods = [item.strip().lower() for item in order_list.split('\n')]
        invalid_goods = [item for item in ordered_goods if item not in available_goods]

        if invalid_goods:
            bot.send_message(message.chat.id,f'–°–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {", ".join(invalid_goods)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:')
            goods(message)


        else:
            user_id = message.chat.id
            cur.execute('CREATE TABLE IF NOT EXISTS to_order (id INTEGER PRIMARY KEY AUTOINCREMENT, order_list TEXT, user_id TEXT)')
            cur.execute("INSERT INTO to_order (order_list, user_id) VALUES (?, ?)", (order_list, user_id))
            conn.commit()
            cur.close()
            conn.close()
            response = create_lead(user_name, user_id, order_list)
            bot.send_message(message.chat.id, response)
            order_choose(message)

def order_choose(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    btn1 = types.KeyboardButton('üóë–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∫–æ—Ä–∑–∏–Ω—É')
    btn2 = types.KeyboardButton('üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=markup)
    bot.register_next_step_handler(message, process_order_choose)


def process_order_choose(message):
    if message.text == 'üóë–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∫–æ—Ä–∑–∏–Ω—É':
        basket_list(message)
    if message.text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        main_menu(message)



def basket_list(message):
    id = message.chat.id

    conn = sqlite3.connect('levis.sql')
    cur = conn.cursor()
    cur.execute('SELECT order_list FROM to_order WHERE user_id = ?', (id,))
    to_order = cur.fetchall()

    basket = ''
    for el in to_order:
        basket += f'{el[0]}\n'
    cur.close()
    conn.close()

    if len(basket) > 0:
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n' + basket)
        main_menu(message)




def support(message):
    global support_name, user_id
    support_name = message.text.strip()
    if not support_name:
        bot.send_message(message.chat.id, '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(message, support)
    else:
        user_id = message.chat.id
        bot.send_message(message.chat.id, '–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
        bot.register_next_step_handler(message, support_final)


def support_final(message):
    global support_name, text
    text = message.text.strip()
    if not text:
        bot.send_message(message.chat.id, '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:')
        bot.register_next_step_handler(message, support_final)
    else:
        user_id = message.chat.id
        conn = sqlite3.connect('levis.sql')
        cur = conn.cursor()
        cur.execute('CREATE TABLE IF NOT EXISTS help_request (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, user_id TEXT, text TEXT)')
        cur.execute("INSERT INTO help_request (name, user_id, text) VALUES (?, ?, ?)", (support_name, user_id, text))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å –í–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä!')
        main_menu(message)


bot.polling(none_stop=True)